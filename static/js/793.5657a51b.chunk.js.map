{"version":3,"file":"static/js/793.5657a51b.chunk.js","mappings":"4KAIA,MAwHA,EAxHiBA,KACf,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAiBC,IAAsBJ,EAAAA,EAAAA,UAAS,KAChDK,EAAWC,IAAgBN,EAAAA,EAAAA,WAAS,IACpCO,EAAoBC,IAAyBR,EAAAA,EAAAA,UAAS,OACtDS,EAAYC,IAAiBV,EAAAA,EAAAA,WAAS,GACvCW,EAAM,IAAIC,EAAAA,GAAU,CAAEC,GAAIC,iCAiChC,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACCR,GACFS,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kEAAiEF,SAAA,EAChFF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,6BAA4BF,SAAC,8HAC1CF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,6BAA4BF,SAAC,mJAC1CF,EAAAA,EAAAA,KAAA,UACEK,QAViBC,gBACdV,EAAIW,kBAAkBC,wBAAwB,CAAEzB,SAAQ,EAU3DqB,UAAU,+GAA8GF,SACzH,iDAKEF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,4DAA2DF,UAC5EC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,6DAA4DF,SAAA,EACzEF,EAAAA,EAAAA,KAAA,MAAII,UAAU,sCAAqCF,SAAC,0BAEpDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMF,SAAA,EACnBF,EAAAA,EAAAA,KAAA,SAAOI,UAAU,6CAA6CK,QAAQ,QAAOP,SAAC,YAG9EF,EAAAA,EAAAA,KAAA,SACEI,UAAU,6FACVM,KAAK,OACLC,MAAO5B,EACP6B,SAAWC,GAAM7B,EAAS6B,EAAEC,OAAOH,aAIvCR,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMF,SAAA,EACnBF,EAAAA,EAAAA,KAAA,SAAOI,UAAU,6CAA6CK,QAAQ,WAAUP,SAAC,yBAGjFF,EAAAA,EAAAA,KAAA,SACEI,UAAU,6FACVM,KAAK,WACLC,MAAOzB,EACP0B,SAAWC,GAAM1B,EAAY0B,EAAEC,OAAOH,aAI1CR,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMF,SAAA,EACnBF,EAAAA,EAAAA,KAAA,SAAOI,UAAU,6CAA6CK,QAAQ,kBAAiBP,SAAC,0CAGxFF,EAAAA,EAAAA,KAAA,SACEI,UAAU,6FACVM,KAAK,WACLC,MAAOvB,EACPwB,SAAWC,GAAMxB,EAAmBwB,EAAEC,OAAOH,aAIjDX,EAAAA,EAAAA,KAAA,UACEI,UAAS,uGAAAW,OACPzB,EAAY,gCAAkC,IAEhDe,QA1FeC,UACnB,IAAIhB,EAAJ,CASA,GALAC,GAAa,GAKTL,IAAaE,EAGf,OAFAK,EAAsB,gCACtBF,GAAa,GAIf,UACQK,EAAIW,kBAAkBS,aAAa,CAAEjC,QAAOG,aAClDO,EAAsB,4BACtBE,GAAc,EAChB,CAAE,MAAOsB,GACP,MAAMC,EAAeD,EAAMA,MACrBE,EAAyBD,EAAaE,OAAO,GAAGC,cAAgBH,EAAaI,MAAM,GAC3FC,MAAMJ,GACJ1B,EAAsB,uBACxB,CAAC,QACCF,GAAa,EACf,CAxBA,CAwBA,EAgEIiC,SAAUlC,EAAUY,SAEnBZ,EAAY,oCAAoB,yBAGlCE,IACCQ,EAAAA,EAAAA,KAAA,KAAGI,UAAS,QAAAW,OAAiC,6BAAvBvB,EAAoD,iBAAmB,gBAAiBU,SAC3GV,KAILW,EAAAA,EAAAA,MAAA,KAAGC,UAAU,mBAAkBF,SAAA,CAAC,wCACbF,EAAAA,EAAAA,KAACyB,EAAAA,GAAI,CAACC,GAAG,mBAAmBtB,UAAU,kBAAiBF,SAAC,oDAK1E,C","sources":["routers/userConfig/interact/register.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as Realm from \"realm-web\";\r\n\r\nconst Register = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [registrationStatus, setRegistrationStatus] = useState(null);\r\n  const [isRegister, setIsRegister] = useState(false);\r\n  const app = new Realm.App({ id: process.env.REACT_APP_KEY });\r\n  const registerUser = async () => {\r\n    if (isLoading) {\r\n      return; // Tránh nhấn nút nhiều lần trong khi đang xử lý\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n\r\n\r\n    // Kiểm tra xem mật khẩu và mật khẩu xác nhận có khớp nhau không\r\n    if (password !== confirmPassword) {\r\n      setRegistrationStatus(\"Passwords do not match.\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await app.emailPasswordAuth.registerUser({ email, password });\r\n      setRegistrationStatus(\"Registration successful!\");\r\n      setIsRegister(true)\r\n    } catch (error) {\r\n      const errorMessage = error.error;\r\n      const uppercasedErrorMessage = errorMessage.charAt(0).toUpperCase() + errorMessage.slice(1);\r\n    alert(uppercasedErrorMessage);\r\n      setRegistrationStatus(\"Registration failed!\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\nconst resendConfirm = async()=>{\r\n  await app.emailPasswordAuth.resendConfirmationEmail({ email });\r\n}\r\n  return (\r\n    <>\r\n    {isRegister?(\r\n   <div className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 max-w-sm mx-auto\">\r\n   <p className=\"text-lg text-gray-800 mb-4\">Vui lòng kiểm tra email của bạn để thực hiện xác thực đăng ký</p>\r\n   <p className=\"text-sm text-gray-600 mb-4\">Nếu bạn không nhận được email hoặc gặp sự cố, bạn có thể gửi lại:</p>\r\n   <button \r\n     onClick={resendConfirm} \r\n     className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n   >\r\n     Gửi lại email xác thực\r\n   </button>\r\n </div>):\r\n    \r\n    ( <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\r\n    <div className=\"bg-white p-8 rounded shadow-md w-96 border border-gray-300\">\r\n      <h2 className=\"text-2xl font-bold mb-4 text-center\">Đăng Ký</h2>\r\n\r\n      <div className=\"mb-4\">\r\n        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"email\">\r\n          Email:\r\n        </label>\r\n        <input\r\n          className=\"w-full px-3 py-2 border rounded border-gray-300 focus:outline-none focus:border-indigo-500\"\r\n          type=\"text\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"mb-4\">\r\n        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"password\">\r\n          Mật khẩu:\r\n        </label>\r\n        <input\r\n          className=\"w-full px-3 py-2 border rounded border-gray-300 focus:outline-none focus:border-indigo-500\"\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"mb-4\">\r\n        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"confirmPassword\">\r\n          Xác nhận mật khẩu:\r\n        </label>\r\n        <input\r\n          className=\"w-full px-3 py-2 border rounded border-gray-300 focus:outline-none focus:border-indigo-500\"\r\n          type=\"password\"\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      <button\r\n        className={`w-full bg-indigo-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline ${\r\n          isLoading ? 'opacity-50 cursor-not-allowed' : ''\r\n        }`}\r\n        onClick={registerUser}\r\n        disabled={isLoading}\r\n      >\r\n        {isLoading ? 'Đang đăng ký...' : 'Đăng ký'}\r\n      </button>\r\n\r\n      {registrationStatus && (\r\n        <p className={`mt-4 ${registrationStatus === \"Registration successful!\" ? \"text-green-500\" : \"text-red-500\"}`}>\r\n          {registrationStatus}\r\n        </p>\r\n      )}\r\n\r\n      <p className=\"mt-4 text-center\">\r\n        Đã có tài khoản? <Link to=\"/inan-rjsf/login\" className=\"text-indigo-500\">Quay lại đăng nhập</Link>\r\n      </p>\r\n    </div>\r\n  </div>)}\r\n   \r\n    </>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"],"names":["Register","email","setEmail","useState","password","setPassword","confirmPassword","setConfirmPassword","isLoading","setIsLoading","registrationStatus","setRegistrationStatus","isRegister","setIsRegister","app","Realm","id","process","_jsx","_Fragment","children","_jsxs","className","onClick","async","emailPasswordAuth","resendConfirmationEmail","htmlFor","type","value","onChange","e","target","concat","registerUser","error","errorMessage","uppercasedErrorMessage","charAt","toUpperCase","slice","alert","disabled","Link","to"],"sourceRoot":""}