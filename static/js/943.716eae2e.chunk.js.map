{"version":3,"file":"static/js/943.716eae2e.chunk.js","mappings":"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","sources":["routers/userConfig/interact/login.js"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport * as Realm from 'realm-web';\r\n\r\nconst Login = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n  const app = useMemo(() => new Realm.App({ id: process.env.REACT_APP_KEY }), []);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []); // Empty dependency array means it runs once on mount\r\n\r\n  useEffect(() => {\r\n    try {\r\n      Realm.handleAuthRedirect();\r\n    } catch (error) {\r\n      \r\n    }\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      if (app.currentUser?.customData?.type === \"normal\") {\r\n        navigate('/inan-rjsf/products/Mycart');\r\n      } else if (app.currentUser?.customData?.type === \"Admin\") {\r\n        navigate('/inan-rjsf/admin/addproduct');\r\n      }\r\n    } catch (error) {\r\n      alert(error.error);\r\n    }\r\n  };\r\n\r\n  const loginEmailPassword = async () => {\r\n    if (isLoading) {\r\n      return; // Avoid pressing the button multiple times while processing\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const credentials = Realm.Credentials.emailPassword(email, password);\r\n      const user = await app.logIn(credentials);\r\n      if (user.customData?.type === \"normal\") {\r\n        navigate('/inan-rjsf/products/Mycart');\r\n      } else if (user.customData?.type === \"Admin\") {\r\n        navigate('/inan-rjsf/admin/addproduct');\r\n        console.log(app.currentUser);\r\n      } else if (user.customData?.type === \"Manager\") {\r\n        navigate('/inan-rjsf/manager');\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.error;\r\n      const uppercasedErrorMessage = errorMessage.charAt(0).toUpperCase() + errorMessage.slice(1);\r\n      alert(uppercasedErrorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      loginEmailPassword();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\r\n      <div className=\"bg-white p-8 rounded shadow-md w-96 border border-gray-300\">\r\n        <h2 className=\"text-2xl font-bold mb-4 text-center\">Đăng Nhập</h2>\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"email\">\r\n            Email:\r\n          </label>\r\n          <input\r\n            className=\"w-full px-3 py-2 border rounded border-gray-300 focus:outline-none focus:border-indigo-500\"\r\n            type=\"text\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            onKeyDown={handleKeyPress}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"password\">\r\n            Mật khẩu:\r\n          </label>\r\n          <input\r\n            className=\"w-full px-3 py-2 border rounded border-gray-300 focus:outline-none focus:border-indigo-500\"\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            onKeyDown={handleKeyPress} // Call handleKeyPress when Enter is pressed\r\n          />\r\n        </div>\r\n        <button\r\n          className={`w-full bg-indigo-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline ${\r\n            isLoading ? 'opacity-50 cursor-not-allowed' : ''\r\n          }`}\r\n          onClick={loginEmailPassword}\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading ? 'Đang đăng nhập...' : 'Đăng nhập'}\r\n        </button>\r\n        <p className=\"mt-4 text-center\">\r\n          Chưa có tài khoản? <Link to=\"/inan-rjsf/register\" className=\"text-indigo-500\">Đăng ký</Link>\r\n        </p>\r\n        <p className=\"mt-4 text-center\">\r\n          Quên mật khẩu? <Link to=\"/inan-rjsf/resetpassword\" className=\"text-indigo-500\">Tìm mật khẩu ngay!</Link>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["Login","email","setEmail","useState","password","setPassword","isLoading","setIsLoading","navigate","useNavigate","app","useMemo","Realm","id","process","useEffect","fetchData","error","async","_app$currentUser","_app$currentUser$cust","_app$currentUser2","_app$currentUser2$cus","currentUser","customData","type","alert","loginEmailPassword","_user$customData","_user$customData2","_user$customData3","credentials","emailPassword","user","logIn","console","log","errorMessage","uppercasedErrorMessage","charAt","toUpperCase","slice","handleKeyPress","event","key","_jsx","className","children","_jsxs","htmlFor","value","onChange","e","target","onKeyDown","concat","onClick","disabled","Link","to"],"sourceRoot":""}