{"version":3,"file":"static/js/943.5c1ca2d7.chunk.js","mappings":"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","sources":["components/Modal.js","routers/userConfig/interact/login.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Modal = ({ isOpen, onClose, message, array }) => {\r\n  const [isVisible, setIsVisible] = useState(isOpen);\r\n\r\n  useEffect(() => {\r\n    setIsVisible(isOpen);\r\n  }, [isOpen]);\r\n\r\n  const handleClose = () => {\r\n    setIsVisible(false);\r\n    onClose();\r\n    if (array === 1) {\r\n      window.location.reload(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`fixed inset-0 z-50 flex items-center justify-center overflow-auto transition-opacity ${\r\n        isVisible ? 'opacity-100' : 'opacity-0 pointer-events-none'\r\n      }`}\r\n    >\r\n      <div className=\"fixed inset-0 bg-gray-800 bg-opacity-50 transition-opacity\"></div>\r\n      <div className=\"relative w-full max-w-md p-6 mx-auto bg-white rounded shadow-lg border border-gray-300 transition-transform transform\">\r\n        <div className=\"absolute top-0 right-0 p-2\">\r\n          <button\r\n            className=\"text-gray-600 hover:text-gray-800\"\r\n            onClick={handleClose}\r\n          >\r\n            <svg\r\n              className=\"w-6 h-6 fill-current\"\r\n              viewBox=\"0 0 24 24\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path d=\"M6.293 6.293a1 1 0 011.414 0L12 10.586l4.293-4.293a1 1 0 111.414 1.414L13.414 12l4.293 4.293a1 1 0 01-1.414 1.414L12 13.414l-4.293 4.293a1 1 0 01-1.414-1.414L10.586 12 6.293 7.707a1 1 0 010-1.414z\"></path>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        <div className=\"p-4\">\r\n          {Array.isArray(message) ? (\r\n            message.map((msg, index) => (\r\n              <div key={index} className=\"mb-2\">\r\n                {msg}\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>{message}</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useEffect, useState, useMemo } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport * as Realm from 'realm-web';\r\nimport Modal from '../../../components/Modal';\r\nconst Login = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isOpen2, setIsOpen2] = useState(false);\r\n  const [message2, setMessage2] = useState([]);\r\n  const navigate = useNavigate();\r\n  const app = useMemo(() => new Realm.App({ id: process.env.REACT_APP_KEY }), []);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []); // Empty dependency array means it runs once on mount\r\n\r\n  // useEffect(() => {\r\n  //   try {\r\n  //     Realm.handleAuthRedirect();\r\n  //   } catch (error) {\r\n      \r\n  //   }\r\n  // }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      if (app.currentUser?.customData?.type === \"normal\") {\r\n        navigate('/inan-rjsf/products/Mycart');\r\n      } else if (app.currentUser?.customData?.type === \"Admin\") {\r\n        navigate('/inan-rjsf/admin/addproduct');\r\n      }\r\n    } catch (error) {\r\n      setIsOpen2(true)\r\n      setMessage2(error.error)\r\n    }\r\n  };\r\n\r\n  const loginEmailPassword = async () => {\r\n    if (isLoading) {\r\n      return; // Avoid pressing the button multiple times while processing\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const credentials = Realm.Credentials.emailPassword(email, password);\r\n      const user = await app.logIn(credentials);\r\n      if (user.customData?.type === \"normal\") {\r\n        navigate('/inan-rjsf/products/Mycart');\r\n      } else if (user.customData?.type === \"Admin\") {\r\n        navigate('/inan-rjsf/admin/addproduct');\r\n        console.log(app.currentUser);\r\n      } else if (user.customData?.type === \"Manager\") {\r\n        navigate('/inan-rjsf/manager');\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.error;\r\n     \r\n      setIsOpen2(true)\r\n      setMessage2(errorMessage)\r\n      \r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      loginEmailPassword();\r\n    }\r\n  };\r\nconst closeModal = ()=>{\r\n  setIsOpen2(false)\r\n}\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\r\n      <div className=\"bg-white p-8 rounded shadow-md w-96 border border-gray-300\">\r\n        <h2 className=\"text-2xl font-bold mb-4 text-center\">Đăng Nhập</h2>\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"email\">\r\n            Email:\r\n          </label>\r\n          <input\r\n            className=\"w-full px-3 py-2 border rounded border-gray-300 focus:outline-none focus:border-indigo-500\"\r\n            type=\"text\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            onKeyDown={handleKeyPress}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"password\">\r\n            Mật khẩu:\r\n          </label>\r\n          <input\r\n            className=\"w-full px-3 py-2 border rounded border-gray-300 focus:outline-none focus:border-indigo-500\"\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            onKeyDown={handleKeyPress} // Call handleKeyPress when Enter is pressed\r\n          />\r\n        </div>\r\n        <button\r\n          className={`w-full bg-indigo-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline ${\r\n            isLoading ? 'opacity-50 cursor-not-allowed' : ''\r\n          }`}\r\n          onClick={loginEmailPassword}\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading ? 'Đang đăng nhập...' : 'Đăng nhập'}\r\n        </button>\r\n        <p className=\"mt-4 text-center\">\r\n          Chưa có tài khoản? <Link to=\"/inan-rjsf/register\" className=\"text-indigo-500\">Đăng ký</Link>\r\n        </p>\r\n        <p className=\"mt-4 text-center\">\r\n          Quên mật khẩu? <Link to=\"/inan-rjsf/resetpassword\" className=\"text-indigo-500\">Tìm mật khẩu ngay!</Link>\r\n        </p>\r\n      </div>\r\n      <Modal isOpen={isOpen2} onClose={closeModal} message={message2} array={0} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["_ref","isOpen","onClose","message","array","isVisible","setIsVisible","useState","useEffect","_jsxs","className","concat","children","_jsx","onClick","handleClose","window","location","reload","viewBox","xmlns","d","Array","isArray","map","msg","index","Login","email","setEmail","password","setPassword","isLoading","setIsLoading","isOpen2","setIsOpen2","message2","setMessage2","navigate","useNavigate","app","useMemo","Realm","id","process","fetchData","async","_app$currentUser","_app$currentUser$cust","_app$currentUser2","_app$currentUser2$cus","currentUser","customData","type","error","loginEmailPassword","_user$customData","_user$customData2","_user$customData3","credentials","emailPassword","user","logIn","console","log","errorMessage","handleKeyPress","event","key","htmlFor","value","onChange","e","target","onKeyDown","disabled","Link","to","Modal","closeModal"],"sourceRoot":""}