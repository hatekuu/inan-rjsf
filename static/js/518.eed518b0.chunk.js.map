{"version":3,"file":"static/js/518.eed518b0.chunk.js","mappings":"4KAIA,MA4FA,EA5FsBA,KACpB,MAAOC,EAAiBC,IAAoBC,EAAAA,EAAAA,WAAS,IAC9CC,EAAoBC,IAAyBF,EAAAA,EAAAA,UAAS,OACtDG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IACpCK,EAAWC,IAAeN,EAAAA,EAAAA,WAAS,GAEpCO,GAAWC,EAAAA,EAAAA,MACXC,EAAM,IAAIC,EAAAA,GAAU,CAAEC,GAAIC,kCAChCC,EAAAA,EAAAA,YAAU,KACYC,WAGlB,MAAMC,EAAS,IAAIC,gBAAgBC,OAAOC,SAASC,QAC7CC,EAAQL,EAAOM,IAAI,SACnBC,EAAUP,EAAOM,IAAI,WAE3B,GAAKD,GAAUE,GAAYxB,EAI3B,IACEM,GAAa,SACPK,EAAIc,kBAAkBC,YAAY,CAAEJ,QAAOE,YACjDG,QAAQC,IAAI,gCACZxB,EAAsB,gCACtBI,GAAa,GAEbC,EAAS,aACX,CAAE,MAAOoB,GACPF,QAAQE,MAAM,4BAA6BA,GAC3CzB,EAAsB,2BACxB,CAAC,QACCE,GAAa,EACf,GAGFoB,EAAa,GACZ,CAAC1B,EAAiBS,IAOrB,OACCqB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACEzB,GACF0B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kEAAiEF,SAAA,EAChFF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,wCAAuCF,SAAC,wFACrDF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,6BAA4BF,SAAC,+DAC1CF,EAAAA,EAAAA,KAAA,KAAGK,KAAK,sCAAsCC,OAAO,SAASC,IAAI,sBAAsBH,UAAU,8CAA6CF,SAAC,mCAG7IF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,gDAA+CF,UAC9DC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sCAAqCF,SAAA,EAClDF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,OAAMF,SAAE7B,KACrB2B,EAAAA,EAAAA,KAAA,UACEI,UAAS,gGAAAI,OACPjC,EAAY,gCAAkC,IAEhDkC,QArBkBC,KAExBvC,GAAiB,EAAK,EAoBhBwC,SAAUpC,EAAU2B,SAEnB3B,EAAY,0EAAiD,wFAyBpE,C","sources":["routers/userConfig/confirm/registertoken.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport * as Realm from 'realm-web';\r\n\r\nconst RegisterToken = () => {\r\n  const [isButtonPressed, setButtonPressed] = useState(false);\r\n  const [confirmationStatus, setConfirmationStatus] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isconfirm, setIsconfirm] =useState(false)\r\n  // const [email,setEmail]=useState('')\r\n  const navigate = useNavigate();\r\n  const app = new Realm.App({ id: process.env.REACT_APP_KEY });\r\n  useEffect(() => {\r\n    const confirmUser = async () => {\r\n     \r\n\r\n      const params = new URLSearchParams(window.location.search);\r\n      const token = params.get('token');\r\n      const tokenId = params.get('tokenId');\r\n\r\n      if (!token || !tokenId || !isButtonPressed) {\r\n        return; // Không chạy nếu không có token hoặc tokenId hoặc nút chưa được nhấn\r\n      }\r\n\r\n      try {\r\n        setIsLoading(true);\r\n        await app.emailPasswordAuth.confirmUser({ token, tokenId });\r\n        console.log('User confirmed successfully!');\r\n        setConfirmationStatus('User confirmed successfully!');\r\n        setIsconfirm(true)\r\n        // Chuyển hướng về trang đăng nhập khi người dùng đã được xác nhận và nút đã được nhấn\r\n        navigate('/inan-rjsf');\r\n      } catch (error) {\r\n        console.error('User confirmation failed:', error);\r\n        setConfirmationStatus('User confirmation failed');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    confirmUser();\r\n  }, [isButtonPressed, navigate]);\r\n\r\n  const handleButtonClick = () => {\r\n    // Đặt trạng thái nút thành true khi nút được nhấn\r\n    setButtonPressed(true);\r\n  };\r\n\r\n  return (\r\n   <>\r\n    {isconfirm?(\r\n   <div className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4 max-w-sm mx-auto\">\r\n   <p className=\"text-lg text-green-600 font-bold mb-4\">Tài khoản đã được xác thực thành công</p>\r\n   <p className=\"text-sm text-gray-600 mb-4\">Bạn có muốn trở về trang chủ?</p>\r\n   <a href=\"https://sites.google.com/view/cpkd/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-500 hover:text-blue-700 font-bold\">Ấn vào đây</a>\r\n </div>\r\n    ):(\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n      <div className=\"bg-white p-8 rounded shadow-md w-96\">\r\n        <p className=\"mb-4\">{confirmationStatus}</p>\r\n        <button\r\n          className={`bg-indigo-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline ${\r\n            isLoading ? 'opacity-50 cursor-not-allowed' : ''\r\n          }`}\r\n          onClick={handleButtonClick}\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading ? 'Đang xác thực vui lòng chờ trong giây lát...' : 'Ấn vào đây để xác thực đăng ký'}\r\n        </button>\r\n      </div>\r\n      {/* <div className=\"mb-4\">\r\n        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"email\">\r\n          Email:\r\n        </label>\r\n        <input\r\n          className=\"w-full px-3 py-2 border rounded border-gray-300 focus:outline-none focus:border-indigo-500\"\r\n          type=\"text\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </div>\r\n        <button\r\n          className={`bg-indigo-500 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline ${\r\n            isLoading ? 'opacity-50 cursor-not-allowed' : ''\r\n          }`}\r\n          onClick={handleButtonClick2}\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading ? 'Đang xác thực vui lòng chờ trong giây lát...' : 'Ấn vào đây để xác thực lại'}\r\n        </button> */}\r\n    </div>\r\n    )}\r\n </>\r\n  );\r\n};\r\n\r\nexport default RegisterToken;\r\n"],"names":["RegisterToken","isButtonPressed","setButtonPressed","useState","confirmationStatus","setConfirmationStatus","isLoading","setIsLoading","isconfirm","setIsconfirm","navigate","useNavigate","app","Realm","id","process","useEffect","async","params","URLSearchParams","window","location","search","token","get","tokenId","emailPasswordAuth","confirmUser","console","log","error","_jsx","_Fragment","children","_jsxs","className","href","target","rel","concat","onClick","handleButtonClick","disabled"],"sourceRoot":""}