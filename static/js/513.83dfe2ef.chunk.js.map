{"version":3,"file":"static/js/513.83dfe2ef.chunk.js","mappings":"kKAGA,MAkFA,EAlFiBA,KACf,MAAMC,EAAM,IAAIC,EAAAA,GAAU,CAAEC,GAAIC,kCACzBC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAEvCG,EAAAA,EAAAA,YAAU,KACRC,GAAW,GACV,IAEH,MAAMA,EAAYC,UAChB,IACE,MAAMC,EAAe,iBACfC,QAAeb,EAAIc,YAAYC,aAAaH,GAClDP,EAAYQ,GACZL,GAAW,EACb,CAAE,MAAOQ,GACPC,QAAQD,MAAM,2BAA4BA,GAC1CR,GAAW,EACb,GAmCF,OACEU,EAAAA,EAAAA,MAAA,OAAKC,UAAU,6BAA4BC,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,0BAAyBC,SAAC,oCAEvCb,IAAWc,EAAAA,EAAAA,KAAA,KAAGF,UAAU,cAAaC,SAAC,iCAE9B,OAARhB,QAAQ,IAARA,OAAQ,EAARA,EAAUkB,QAAS,IAClBD,EAAAA,EAAAA,KAAA,MAAIF,UAAU,uDAAsDC,SACzD,OAARhB,QAAQ,IAARA,OAAQ,EAARA,EAAUmB,KAAI,CAACC,EAASC,KACvBP,EAAAA,EAAAA,MAAA,MAAsBC,UAAU,6EAA4EC,SAAA,EAC1GC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,6BAA4BC,SAAEI,EAAQE,eACpDR,EAAAA,EAAAA,MAAA,KAAGC,UAAU,qBAAoBC,SAAA,CAAC,eAAUI,EAAQG,gBACpDT,EAAAA,EAAAA,MAAA,KAAGC,UAAU,qBAAoBC,SAAA,CAAC,YAAOI,EAAQI,iBACjDV,EAAAA,EAAAA,MAAA,KAAGC,UAAU,qBAAoBC,SAAA,CAAC,4BAAWI,EAAQK,aACrDR,EAAAA,EAAAA,KAAA,UACES,QAASA,IA/CGnB,OAAOoB,EAAWN,KACxC,IACE,MAAMb,EAAe,YACfoB,EAAO,CAACD,EAAW/B,EAAIc,YAAYZ,IAEzCG,GAAa4B,IACX,MAAMC,EAAkB,IAAID,GAE5B,OADAC,EAAgBT,GAAS,IAAKS,EAAgBT,GAAQU,cAAc,GAC7DD,CAAe,UAGlBlC,EAAIc,YAAYC,aAAaH,KAAiBoB,GAGpD3B,GAAa4B,IACX,MAAMC,EAAkB,IAAID,GAE5B,OADAC,EAAgBT,GAAS,IAAKS,EAAgBT,GAAQU,cAAc,GAC7DD,CAAe,GAG1B,CAAE,MAAOlB,GACPC,QAAQD,MAAM,wBAAyBA,GAGvCX,GAAa4B,IACX,MAAMC,EAAkB,IAAID,GAE5B,OADAC,EAAgBT,GAAS,IAAKS,EAAgBT,GAAQU,cAAc,GAC7DD,CAAe,GAE1B,GAkByBE,CAAgBZ,EAAQa,IAAKZ,GAC5Ca,SAAUd,EAAQW,aAClBhB,UAAS,+DAAAoB,OAAiEf,EAAQW,aAAe,gCAAkC,qBAAsBf,SAExJI,EAAQW,aAAe,8CAA6B,sCAVhDX,EAAQa,WAgBnB,C","sources":["routers/products.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport * as Realm from 'realm-web';\r\n\r\nconst Products = () => {\r\n  const app = new Realm.App({ id: process.env.REACT_APP_KEY });\r\n  const [products, setProducts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const functionName = \"getAllProducts\";\r\n      const result = await app.currentUser.callFunction(functionName);\r\n      setProducts(result);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching products:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddToCart = async (productId, index) => {\r\n    try {\r\n      const functionName = \"AddToCart\";\r\n      const args = [productId, app.currentUser.id];\r\n      // Set loading state for the specific product\r\n      setProducts((prevProducts) => {\r\n        const updatedProducts = [...prevProducts];\r\n        updatedProducts[index] = { ...updatedProducts[index], addingToCart: true };\r\n        return updatedProducts;\r\n      });\r\n      \r\n      await app.currentUser.callFunction(functionName, ...args);\r\n\r\n      // Update state after successful addToCart\r\n      setProducts((prevProducts) => {\r\n        const updatedProducts = [...prevProducts];\r\n        updatedProducts[index] = { ...updatedProducts[index], addingToCart: false };\r\n        return updatedProducts;\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error('Error adding to cart:', error);\r\n      // Handle error, show an error message to the user if needed\r\n      // You might also want to reset the loading state for the specific product in case of an error\r\n      setProducts((prevProducts) => {\r\n        const updatedProducts = [...prevProducts];\r\n        updatedProducts[index] = { ...updatedProducts[index], addingToCart: false };\r\n        return updatedProducts;\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto mt-8 p-4\">\r\n    <h1 className=\"text-2xl font-bold mb-4\">Danh sách sản phẩm</h1>\r\n  \r\n    {loading && <p className=\"text-center\">Đợi xíu nha...</p>}\r\n    \r\n    {products?.length > 0 && (\r\n      <ul className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n        {products?.map((product, index) => (\r\n          <li key={product._id} className=\"bg-white rounded shadow p-4 transition-transform transform hover:scale-105\">\r\n            <h2 className=\"text-xl font-semibold mb-2\">{product.productName}</h2>\r\n            <p className=\"text-gray-700 mb-2\">Cách in: {product.productType}</p>\r\n            <p className=\"text-gray-700 mb-2\">Giá: ${product.sellingPrice}</p>\r\n            <p className=\"text-gray-700 mb-2\">Số lượng: {product.quantity}</p>\r\n            <button\r\n              onClick={() => handleAddToCart(product._id, index)}\r\n              disabled={product.addingToCart}\r\n              className={`bg-blue-500 text-white px-4 py-2 rounded focus:outline-none ${product.addingToCart ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-600'}`}\r\n            >\r\n              {product.addingToCart ? 'Đang thêm vô giỏ hàng...' : 'Thêm vào giỏ hàng'}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    )}\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Products;"],"names":["Products","app","Realm","id","process","products","setProducts","useState","loading","setLoading","useEffect","fetchData","async","functionName","result","currentUser","callFunction","error","console","_jsxs","className","children","_jsx","length","map","product","index","productName","productType","sellingPrice","quantity","onClick","productId","args","prevProducts","updatedProducts","addingToCart","handleAddToCart","_id","disabled","concat"],"sourceRoot":""}